// Реализовать вектор целых чисел: back(), front(), size() 16     if (array < it
// && it < array + capacity)                        //

// Реализовать вектор целых чисел: iterator, push_back(int val),
// remove(iterator)
#include "vector.h" // header - файл заголовка
#include <iostream> // библиотека данных для стардантного потока вывода cout
                    //
void print(const vector &v) {
  for (int i = 0; i < v.getCapacity(); ++i) {      // организовать цикл for по количеству элементов в массиве
    const vector::iterator it = v.at(i);                 // получить итератор по номеру элемента в массиве
    std::cout << *it << '\n';                       // вывод занесенных значений
  }
}

void print(vector &&v) {                                  // функция print выводит элементы массива на экран
  for (int i = 0; i < v.getCapacity(); ++i) {             // цикл for нужен для определения порядковых номеров элеметов
    vector::iterator it = v.at(i);                        // получение указателя по порядковому номеру элемента
    std::cout << *it << ' ';                              // выводим элементы в строчку через пробел
  }
  std::cout << '\n';                                      // переход на седующую строчку
}

bool myIsGreater(const vector::iterator &first, const vector::iterator &second) {   // правило перестоновки от большего к меньшему return *first > *second
  vector *v = new vector();                                                         // создаем объект вектора
  v->push_back(5);                                                                  // добавляем элемент в конец массива
  v->push_back(30);
  v->push_back(4);
  v->push_back(8);
  // 1. Вывод занесенных значений
  // 1.1 Организовать цикл for по количеству элементов в массиве
  // 1.2 Получить итератор по номеру элемента в массиве
  // 1.3 
  print(*v);                             // вывести массив на экран (передача владения v методу print - метод может изменять состояние вектора)
  // 2. Удалить одно из значений
  v->remove(v->at(3));                              // удаляем элемент по смещению 3 (4-й элемент массива - значение 7)
  std::cout << "-------------------------\n";       // отделяем один вывод от другого
  // 3. Повторный вывод значений
  print(*v);                                        // вывести массив на экран (передача владения v методу print - метод может изменять состояние вектора)
  v->sortDescent();                                 // сортируем элементы массива от большего к меньшему 
  std::cout << "-------------------------\n";       // отделяем один вывод от другого
  print(*v);                                        // вывести элементы массива v
  v->sortAscend();                                  // сортируем элементы массива от меньшего к большему
  std::cout << "-------------------------\n";       // отделяем один вывод от другого
  print(*v);                                        // вывести элементы массива v
  v->sort(myIsGreater);                             // использование пользовательского правила сортировки
  std::cout << "-------------------------\n";       // отделяем один вывод от другого
  print(*v);                                        // вывести элементы массива v
  delete v;                                         // удаляем v
  return 0;                                         // возващаем 0 
  }

